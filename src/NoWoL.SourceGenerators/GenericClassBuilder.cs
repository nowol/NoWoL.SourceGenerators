using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace NoWoL.SourceGenerators
{
    internal class GenericClassBuilder
    {
        public static string GenerateFilename(string fileNamePrefix, ClassDefinition classDefinition, string ns, List<ClassDefinition>? parentClasses)
        {
            var filenameStringBuilder = new StringBuilder();
            filenameStringBuilder.Append(ns).Append(classDefinition.Name);

            if (parentClasses != null)
            {
                foreach (var parentClass in parentClasses)
                {
                    var buildClassDefinition = GenerationHelpers.BuildClassDefinition(parentClass.Name, parentClass.Modifier);
                    filenameStringBuilder.Append(buildClassDefinition);
                }
            }

            return GenerateFileName(filenameStringBuilder,
                                    fileNamePrefix);
        }

        public static void WriteClassStart(IndentedStringBuilder sb, ClassDefinition classDefinition, string ns, List<ClassDefinition>? parentClasses)
        {
            sb.Add($@"namespace {ns}
{{", addNewLine: true);

            //var parentClasses = typeDeclaration.Ancestors().Where(x => x.IsKind(SyntaxKind.ClassDeclaration)).OfType<ClassDeclarationSyntax>().Reverse();

            if (parentClasses != null)
            {
                foreach (var parentClass in parentClasses)
                {
                    var buildClassDefinition = GenerationHelpers.BuildClassDefinition(parentClass.Name, parentClass.Modifier);
                    //filenameStringBuilder.Append(buildClassDefinition);

                    sb.IncreaseIndent();

                    sb.Add(buildClassDefinition,
                           addNewLine: true);
                    sb.Add("{",
                           addNewLine: true);
                }
            }
        }

        public static void WriteClassEnd(IndentedStringBuilder sb)
        {
            if (sb.Indent > 0)
            {
                while (sb.Indent > 1)
                {
                    sb.Add("}", addNewLine: true);
                    sb.DecreaseIndent();
                }

                sb.Add("}", addNewLine: true);
                sb.DecreaseIndent();
            }

            sb.Add("}");
        }

        internal static GenericClassBuilderResult GenerateClass(IndentedStringBuilder sb, 
                                                                string nameSpace, 
                                                                TypeDeclarationSyntax typeDeclaration,
                                                                string fileNamePrefix,
                                                                Action<IndentedStringBuilder> addBody,
                                                                Action<IndentedStringBuilder>? addUsings = null)
        {
            sb.AddRaw(GenerationHelpers.AutoGeneratedHeader);
            addUsings?.Invoke(sb);

            sb.Add($@"namespace {nameSpace}
{{", addNewLine: true);
            
            var parentClasses = typeDeclaration.Ancestors().Where(x => x.IsKind(SyntaxKind.ClassDeclaration)).OfType<ClassDeclarationSyntax>().Reverse();
            var filenameStringBuilder = new StringBuilder();
            filenameStringBuilder.Append(nameSpace).Append(typeDeclaration.Identifier.ValueText);

            foreach (var parentClass in parentClasses)
            {
                var buildClassDefinition = GenerationHelpers.BuildTypeDefinition(parentClass);
                filenameStringBuilder.Append(buildClassDefinition);

                sb.IncreaseIndent();
                sb.Add(buildClassDefinition, addNewLine: true);
                sb.Add("{", addNewLine: true);
            }

            addBody(sb);

            if (sb.Indent > 0)
            {
                while (sb.Indent > 1)
                {
                    sb.Add("}", addNewLine: true);
                    sb.DecreaseIndent();
                }

                sb.Add("}", addNewLine: true);
                sb.DecreaseIndent();
            }

            sb.Add("}");

            return new GenericClassBuilderResult
                   {
                       FileName = GenerateFileName(filenameStringBuilder, fileNamePrefix)
                   };
        }

        private static string GenerateFileName(StringBuilder filenameStringBuilder, string fileNamePrefix)
        {
            var name = $"{fileNamePrefix}_{GenerationHelpers.Md5(filenameStringBuilder.ToString())}.g.cs";

            return name;
        }
    }
}