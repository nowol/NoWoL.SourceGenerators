using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using NoWoL.SourceGenerators.AlwaysInitializedProperty;

namespace NoWoL.SourceGenerators
{

    internal class AlwaysInitializedPropertyClassBuilder
    {
        internal void Generate(IndentedStringBuilder sb, ref AlwaysInitializedPropertyClassDefinition classToGenerate)
        {
            sb.AddRaw(GenerationHelpers.AutoGeneratedHeader);

            AddUsings(sb,
                      ref classToGenerate);

            GenericClassBuilder.WriteClassStart(sb,
                                                classToGenerate.AdvClassDef.ClassDef,
                                                classToGenerate.AdvClassDef.Namespace!,
                                                classToGenerate.AdvClassDef.ParentClasses);

            AddBody(sb,
                    ref classToGenerate);

            GenericClassBuilder.WriteClassEnd(sb);
        }

        private void AddUsings(IndentedStringBuilder sb, ref AlwaysInitializedPropertyClassDefinition classToGenerate)
        {
            var hasUsings = false;

            if (!classToGenerate.AdvClassDef.UsingStatements.IsDefaultOrEmpty)
            {
                foreach (var usingStatement in classToGenerate.AdvClassDef.UsingStatements)
                {
                    hasUsings = true;
                    sb.Add($"using {usingStatement};",
                           addNewLine: true);
                }
            }

            if (hasUsings)
            {
                sb.Add(String.Empty,
                       addNewLine: true);
            }
        }

        private void AddBody(IndentedStringBuilder sb, ref AlwaysInitializedPropertyClassDefinition classToGenerate)
        {
            sb.Add($@"    {SimpleCounter.GetValue()}[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    {CodeGenAttribute}
    {GenerationHelpers.BuildClassDefinition(classToGenerate.AdvClassDef.ClassDef.Name, classToGenerate.AdvClassDef.ClassDef.Modifier)}
    {{
", removeLastNewLines: false, addNewLine: true);

            AddFields(sb,
                      ref classToGenerate);

            sb.Add(@"
    }", addNewLine: true);
        }

        private void AddFields(IndentedStringBuilder sb, ref AlwaysInitializedPropertyClassDefinition classToGenerate)
        {
            sb.IncreaseIndent();
            sb.IncreaseIndent();

            for (var i = 0; i < classToGenerate.Fields.Length; i++)
            {
                var field = classToGenerate.Fields[i];

                var fieldName = field.Name!;
                var fieldNameClean = fieldName.TrimStart('_');
                var propertyName = fieldNameClean.Substring(0, 1).ToUpperInvariant() + fieldNameClean.Substring(1);
                var fieldType = field.Type!;

                if (!String.IsNullOrWhiteSpace(field.LeadingTrivia))
                {
                    var lines = field.LeadingTrivia!.Split(new string[] { "\r\n", "\n" },
                                                          StringSplitOptions.None);

                    for (var lineIndex = 0; lineIndex < lines.Length; lineIndex++)
                    {
                        var line = lines[lineIndex];
                        sb.Add(line.TrimStart(), addNewLine: (lineIndex + 1 < lines.Length));
                    }
                }

                sb.Add($"public {fieldType} {propertyName}", addNewLine: true);
                sb.Add("{", addNewLine: true);
                sb.Add("    get", addNewLine: true);
                sb.Add("    {", addNewLine: true);
                sb.Add($"        if ({fieldName} == default)", addNewLine: true);
                sb.Add("        {", addNewLine: true);
                sb.Add($"            {fieldName} = new {fieldType}();", addNewLine: true);
                sb.Add("        }", addNewLine: true);
                sb.Add("", addNewLine: true);
                sb.Add($"        return {fieldName};", addNewLine: true);
                sb.Add("    }", addNewLine: true);
                
                sb.Add($"    set {{ {fieldName} = value; }}", addNewLine: true);

                if (i + 1 < classToGenerate.Fields.Length)
                {
                    sb.Add("}", addNewLine: true);
                    sb.Add("", addNewLine: true);
                }
                else
                {
                    sb.Add("}");
                }
            }

            sb.DecreaseIndent();
            sb.DecreaseIndent();
        }

        private static readonly string CodeGenAttribute = GetCodeGenAttribute();

        private static string GetCodeGenAttribute()
        {
            return $@"[System.CodeDom.Compiler.GeneratedCodeAttribute(""{nameof(AlwaysInitializedPropertyGenerator)}"", ""{typeof(AlwaysInitializedPropertyGenerator).Assembly.GetName().Version}"")]";
        }
    }
}